// Hotel Booking System - Authentication Module
// Prisma Schema for PostgreSQL
// Production-ready with proper indexes, constraints, and relationships

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for Role Names
enum RoleName {
  MEMBER
  ADMIN
  SUPERADMIN
}

// ==========================================
// AUTHENTICATION MODELS
// ==========================================

// User Model - Core authentication and user data
model User {
  id                String   @id @default(cuid())
  phone             String   @unique
  name              String
  email             String?  @unique
  roleId            String
  ircaMembershipId  String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  role Role @relation(fields: [roleId], references: [id], onDelete: Restrict)
  otps OTP[]

  // Indexes for performance
  @@index([phone])
  @@index([email])
  @@index([roleId])
  @@index([ircaMembershipId])
  @@map("users")
}

// Role Model - User roles with permissions
model Role {
  id          String   @id @default(cuid())
  name        RoleName @unique
  permissions Json     @default("[]") // Array of permission strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users User[]

  // Indexes
  @@index([name])
  @@map("roles")
}

// OTP Model - One-Time Password for authentication
model OTP {
  id        String   @id @default(cuid())
  userId    String
  otpHash   String   // Hashed OTP for security
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([userId])
  @@index([expiresAt])
  @@map("otps")
}

// ==========================================
// ROOM MANAGEMENT MODELS
// ==========================================

/// RoomType Model - Defines categories of rooms available in the hotel
/// Each room type has a base configuration (name, description, pricing, total count)
/// Examples: Deluxe Room, Executive Suite, Presidential Suite
model RoomType {
  id            String   @id @default(cuid())
  
  /// Display name of the room type (e.g., "Deluxe Room", "Executive Suite")
  name          String   @unique
  
  /// Detailed description of room features, amenities, and size
  description   String   @db.Text
  
  /// Base price per night in the smallest currency unit (e.g., cents for USD)
  /// Example: 15000 = $150.00 per night
  pricePerNight Int
  
  /// Total physical rooms of this type in the hotel
  /// Used to validate inventory and prevent overbooking
  totalRooms    Int
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  /// One-to-many: Each room type has daily inventory records
  inventory RoomInventory[]

  // Indexes for performance
  @@index([name])
  @@index([pricePerNight])
  @@map("room_types")
}

/// RoomInventory Model - Tracks daily availability for each room type
/// Maintains a date-based inventory system to manage bookings
/// Each record represents available rooms for a specific room type on a specific date
model RoomInventory {
  id             String   @id @default(cuid())
  
  /// Foreign key to RoomType
  roomTypeId     String
  
  /// Number of rooms available for booking on this date
  /// Must be <= RoomType.totalRooms
  /// Decremented when bookings are made, incremented on cancellations
  availableRooms Int
  
  /// The specific date for this inventory record (YYYY-MM-DD)
  /// Each room type should have one inventory record per date
  date           DateTime @db.Date
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  /// Many-to-one: Each inventory record belongs to one room type
  /// onDelete: Cascade - When room type is deleted, all its inventory records are deleted
  roomType RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([roomTypeId])
  @@index([date])
  
  // Composite unique constraint: One inventory record per room type per date
  @@unique([roomTypeId, date])
  @@map("room_inventory")
}
