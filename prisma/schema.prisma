// Hotel Booking System - Authentication Module
// Prisma Schema for PostgreSQL
// Production-ready with proper indexes, constraints, and relationships

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for Role Names
enum RoleName {
  MEMBER
  ADMIN
  SUPERADMIN
}

// ==========================================
// AUTHENTICATION MODELS
// ==========================================

// User Model - Core authentication and user data
model User {
  id                String   @id @default(cuid())
  phone             String   @unique
  name              String
  email             String?  @unique
  roleId            String
  ircaMembershipId  String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  role Role @relation(fields: [roleId], references: [id], onDelete: Restrict)
  otps OTP[]

  // Indexes for performance
  @@index([phone])
  @@index([email])
  @@index([roleId])
  @@index([ircaMembershipId])
  @@map("users")
}

// Role Model - User roles with permissions
model Role {
  id          String   @id @default(cuid())
  name        RoleName @unique
  permissions Json     @default("[]") // Array of permission strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users User[]

  // Indexes
  @@index([name])
  @@map("roles")
}

// OTP Model - One-Time Password for authentication
model OTP {
  id        String   @id @default(cuid())
  userId    String
  otpHash   String   // Hashed OTP for security
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([userId])
  @@index([expiresAt])
  @@map("otps")
}
